<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Freeswitch | Depth of Knowledge]]></title>
  <link href="http://tbullock.github.io/blog/categories/freeswitch/atom.xml" rel="self"/>
  <link href="http://tbullock.github.io/"/>
  <updated>2014-12-26T23:18:42-07:00</updated>
  <id>http://tbullock.github.io/</id>
  <author>
    <name><![CDATA[Ted Bullock]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FreeSWITCH on OpenBSD - Project Status 2013-06-02]]></title>
    <link href="http://tbullock.github.io/blog/2013/06/02/freeswitch-on-openbsd-project-status/"/>
    <updated>2013-06-02T00:00:00-06:00</updated>
    <id>http://tbullock.github.io/blog/2013/06/02/freeswitch-on-openbsd-project-status</id>
    <content type="html"><![CDATA[<div class='post'>
I&#8217;ve finally gotten around to making new headway with the FreeSWITCH on OpenBSD project. Although I can honestly see at least year (or more, really) of labour in front of me to produce a high quality port which I would be content to run my voice services on.<br /><br />At the moment, I have a semi functional build which compiles a binary capable of executing just past the banner. I haven&#8217;t checked the last call trace yet, however it looks like we are breaking just after the process forks and spins up a bunch of threads.<br /><br /><h3>Recent Work</h3>I merged a commit today that replaces the hash table wrapper that used to point at internal sqlite APIs to a the public hash table implemented by APR.&nbsp; This is in reaction to an instant crash bug that I was encountering when the old system tried to access the internal sqlite malloc code.<br /><br />I&#8217;ll note that the original implementation of the hash table stuff used APR in the good old days (2008) and was replaced by Anthony for reasons that I am currently unclear about.<br /><br />The results tested well in an impromptu set of test cases I whipped up to see if things should work, and the configurations loaded successfully, however the test of the new implementation really will only happen down the road when we start flinging calls around.&nbsp; <br /><br /><h3>Observations</h3>I find the code style of the FreeSWITCH developers difficult to read for a couple reasons:<br /><br /><ul><li>Long symbol that_describe_what_should_be_happening_like_this</li><li>Long prototypes that disappear off the edge of my monitor, I&#8217;ve seen lines with more than 180 characters which is a bit much.</li></ul>I&#8217;m not going to whinge about the code style too much since it is what it is, however I&#8217;ve voiced my official note saying I don&#8217;t like it.<br /><br />Another issue I have is with the munging of dependencies. What I mean here is that the developers have taken a number of liberties in changing the internals of some dependencies. I suppose that they had their reasons, however it does make me twitch.<br /><br />The more I fiddle with the internals of FreeSWITCH, the more I approve of the projects that have come from the OpenBSD guys. Especially when it comes from the perspective of portability, where the dependency trees are vanishingly small.&nbsp; The FreeSWITCH perspective is somewhat along the lines of &#8220;ok, this pile of kitchen sinks seems balanced, don&#8217;t fuck with it&#8221;.<br /><br /><br /><br /><h3>Current tasks</h3>There are couple items to do right away. The first is spin up the module loading code, port some modules, and verify that the core modules are loading in what appears to be a correct manner.<br /><br />Also I noticed that I am statically linking my internal libfreeswitch library and that needs to stop.<br /><br /><h3>Down the road</h3>I really dislike the manner in which freeswitch loads its configuration. On the horizon is a new launching and configuration loading change that makes me less twitchy. I&#8217;ll make sure that everything I do here could be conceivably imported upstream.<br /><br />Also, there are couple areas that I think may need special attention, memory handling and threading<br /><br /><h3>Summary</h3>There is lots left to do!</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeSWITCH on OpenBSD]]></title>
    <link href="http://tbullock.github.io/blog/2013/03/28/freeswitch-on-openbsd/"/>
    <updated>2013-03-28T00:00:00-06:00</updated>
    <id>http://tbullock.github.io/blog/2013/03/28/freeswitch-on-openbsd</id>
    <content type="html"><![CDATA[<div class='post'>
Been a while since I posted. If you&#8217;re reading this post you, you probably came in from your  favourite search engine while searching for OpenBSD and FreeSWITCH.<br /><br /><a href="http://www.freeswitch.org/" target="_blank">FreeSWITCH</a> is a software voice switch which handles any manner of <a href="http://wiki.freeswitch.org/wiki/Specsheet" target="_blank">voice related activities</a>.<br /><br />These days <a href="http://wiki.answers.com/Q/How_many_phone_calls_are_made_every_day_in_the_world" rel="nofollow" target="_blank">voice is pretty important</a>, and the backend infrastructure which implements it is in a decades long process of migrating from the traditional&nbsp; POTS (Plain Old Telephone System) to an <a href="http://arstechnica.com/information-technology/2013/01/the-telephone-network-is-obsolete-get-ready-for-the-all-ip-telco/" target="_blank">all IP phone system</a>. FreeSWITCH is definitely going to be on the platforms that ushers in the next generation of telecom. While I have some reservations about how the project is developed and maintained, it has a lot of things going for it like stability and a remarkable feature set.<br /><br />Using FreesSWITCH on OpenBSD might seem like a good idea seeing as how OpenBSD has the spectacular pf firewall, excellent security history and doesn&#8217;t move very far in weird and zany directions.<br /><br />FreeSWITCH on the other hand can&#8217;t seem to stop moving in weird and zany directions. They (even after moving to stable release tarballs) suggest that checking the source out from git is the best way to the most current and stable versions and don&#8217;t blink twice at dragging the entire source tree of their dependencies into their git repository. The FreeSWITCH developers attitude towards using system versions of their dependencies ranges from <a href="http://jira.freeswitch.org/browse/FS-353" target="_blank">aggressive no&#8217;s to rampant apathy</a>. I understand their reasoning (which is not exactly wrong), though for me this is pretty odd considering that pretty much every other major project doesn&#8217;t have this problem.<br /><br />So OpenBSD and FreeSWITCH&#8230; Where to start.<br /><br />At the time of writing there is no port of FreeSWITCH for OpenBSD, or any substantial package built for any major open source operating system.&nbsp; Nor is there likely to be without some serious effort. The only way to use the software is to jump though the git checkout hoops and run their gigantic build process through from start to finish (yawn). Debugging their build process on other operating systems than linux is a pain as well, given the dependency on stuff like gnu make, the position of the planets in the night sky and the inclusion of dependencies in their source tree.<br /><br />There have been thousands of hours of effort put into making those dependencies &#8216;work&#8217; properly on OpenBSD (nevermind all the other platforms out there). And replicating all that work into FreeSWITCH source tree just seems dumb and a waste of time (which it is).<br /><br />My proposed solution (and admittedly a work in progress without a finish line in sight) is the creation something along the lines of a shallow fork of upstream FreeSWITCH that could actually be used as an OpenBSD port.<br /><br />First order of business is the build system, and again since we&#8217;re talking about OpenBSD, I am not talking about using autoconf, gnu make, cmake, imake, scons, or any number of build suites. Really, I&#8217;m just talking about vanilla <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=make" target="_blank">OpenBSD make</a> (<a href="http://mail-index.netbsd.org/netbsd-users/2008/10/11/msg002183.html" target="_blank">here is an interesting thread on BSD Make</a>). Of course, use system libraries or existing tested ports wherever possible.&nbsp; The source tree should contain just those files actually needed for creating a bare installation<br /><br /><br />There are a long list of modules that also need porting, including some core requirements like mod_sofia.<br /><br />After that there needs to be some work done on things like moving configuration to /etc, logs to /var/log and various other activities consistent with making FreeSWITCH a valid citizen on OpenBSD. <br /><br />As I said, this is a work in progress, you can see the progress <a href="https://github.com/tbullock/freeswitch-openbsd" target="_blank">here on github</a>.</div>

]]></content>
  </entry>
  
</feed>
